#!/usr/bin/env ruby
# Copyright (c) 2009-2011 VMware, Inc.
#
ENV["BUNDLE_GEMFILE"] ||= File.expand_path('../../Gemfile', __FILE__)
require 'bundler/setup'
require 'vcap_services_base'

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'service_broker/async_gateway'

class VCAP::Services::ServiceBroker::Gateway < VCAP::Services::Base::Gateway

  def parse_config
    config_file = default_config_file
    pre_defined_services = default_pre_defined_services_config_file

    OptionParser.new do |opts|
      opts.banner = "Usage: $0 [options]"
      opts.on("-c", "--config [ARG]", "Configuration File") do |opt|
        config_file = opt
      end
      opts.on("-p", "--pre-defined [ARG]", "Pre-defined Services Configration File") do |opt|
        pre_defined_services = opt
      end
      opts.on("-h", "--help", "Help") do
        puts opts
        exit
      end
    end.parse!

    begin
      @config = parse_gateway_config(config_file)
      services = parse_pre_defined_services_config(pre_defined_services)
      @config.merge!(services) if services
    rescue => e
      puts "Couldn't read config file: #{e}"
      exit
    end
  end

  def parse_pre_defined_services_config(config_file)
    config = YAML.load_file(config_file)
    config = VCAP.symbolize_keys(config)
    config
  end

  def async_gateway_class
    VCAP::Services::ServiceBroker::AsynchronousServiceGateway
  end

  def default_config_file
    File.join(File.dirname(__FILE__), '..', 'config', 'service_broker.yml')
  end

  def default_pre_defined_services_config_file
    File.join(File.dirname(__FILE__), '..', 'config', 'pre_defined_services.yml')
  end

  def start
    parse_config

    setup_vcap_logging

    setup_pid

    @config[:host]                 = VCAP.local_ip(@config[:ip_route])
    @config[:port]               ||= VCAP.grab_ephemeral_port
    @config[:cloud_controller_uri] = @config[:cloud_controller_uri] || default_cloud_controller_uri
    @config[:node_timeout]         = @config[:node_timeout] || 5

    # Go!
    EM.run do
      sg = async_gateway_class.new(@config)
      Thin::Server.start(@config[:host], @config[:port], sg)
    end
  end
end

VCAP::Services::ServiceBroker::Gateway.new.start
