#!/usr/bin/env ruby
# Copyright (c) 2009-2011 VMware, Inc.
#
# This script is used to backup mysql instances used in MyaaS.

ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../../Gemfile", __FILE__)
require 'bundler/setup'
require 'vcap_services_base'

$:.unshift(File.expand_path("../../lib", __FILE__))
require 'mysql_service/node'
require 'mysql_service/util'
require 'mysql2'
require 'datamapper_l'

module VCAP
  module Services
    module Mysql
    end
  end
end
class VCAP::Services::Mysql::Backup < VCAP::Services::Base::Backup
  SYSTEM_DB = %w(mysql information_schema)
  IGNORE_DB = %w(test)

  def default_config_file
    File.join(File.dirname(__FILE__), '..', 'config', 'mysql_backup.yml')
  end

  def backup_db
    opts = {
      :service_name => @config["service_name"],
      :backup_cmd => @config["backup_cmd"],
      :mysql => @config["mysql"],
      :backup_path => @config["backup_base_dir"],
      :compress_cmd => @config["compress_cmd"],
    }

    @config["local_db"] ||= "sqlite3:/var/vcap/store/mysql_node.db"

    missing_opts = opts.keys.select{|key| opts[key] == nil}
    unless missing_opts.empty?
      echo "Missing required configuration items #{missing_opts.inspect}",true
      return 1
    end
    # Optional backup timeout config, default is no timeout
    opts[:timeout] = @config["timeout"] || 0

    current_time = Time.now
    use_warden = @config["use_warden"] || false
    service_class = use_warden ? VCAP::Services::Mysql::Node::WardenProvisionedService : VCAP::Services::Mysql::Node::ProvisionedService
    DataMapper.setup(:default, @config["local_db"])
    dbs = service_class.all.map {|s| s.name}

    echo "Begin backup at #{current_time}"
    success, failed, ignored = [0,0,0]
    dbs.each do |name|
      instance = service_class.get(name)
      result = exe_backup_db(update_opts(use_warden, opts, instance, current_time))
      case result
      when 0
        success += 1
      when 1
        failed += 1
      when -1
        ignored += 1
      else
      end

      raise Interrupt, "Interrupted" if @shutdown
    end
    echo "Backup begins at #{current_time} complete. Success: #{success}. Failed #{failed}. Ignored #{ignored}."
    0
  end

  def exe_backup_db(opts)
    backup_cmd, compress_cmd, name, ts =
      %w(backup_cmd compress_cmd name ts).map{|k| opts[k.to_sym]}

    # dir structure looks like \backups\<service-name>\<aa>\<bb>\<cc>\
    # <aabbcc-rest-of-instance-guid>\<seconds_since_epoc>\<service specific data>
    full_path = get_dump_path(name, :time => ts)
    opts.merge!({:full_path => full_path})
    # options substitution
    backup_cmd = opts.keys.inject(backup_cmd) do|cmd, key|
      cmd.gsub(":"+key.to_s, opts[key].to_s)
    end
    compress_cmd = opts.keys.inject(compress_cmd) do|cmd, key|
      cmd.gsub(":"+key.to_s, opts[key].to_s)
    end
    on_err = Proc.new do |cmd, code, msg|
      echo "CMD '#{cmd}' exit with code: #{code}. Message: #{msg}",true
      cleanup(full_path)
    end
    t1 = Time.now
    FileUtils.mkdir_p(full_path) unless File.exists?(full_path)
    res = CMDHandle.execute("#{backup_cmd};#{compress_cmd}", opts[:timeout].to_i, on_err)
    t2 = Time.now
    echo "Backup for db #{name} complete in #{t2-t1} seconds."
    return res ? 0:1
  rescue => e
    echo "Erorr when backup db #{opts[:name]}. #{e.backtrace.join("\n")}",true
    cleanup(full_path)
    return 1
  end

  def update_opts(use_warden, opts, instance, current_time)
    mysql_config = opts[:mysql][instance.version]
    user = mysql_config["user"]
    passwd = mysql_config["pass"]
    socket = mysql_config["socket"]
    name = instance.name
    mysqldump_bin = mysql_config["mysqldump_bin"]
    host = port = nil
    if use_warden
      host = VCAP.local_ip
      port = instance.port
    else
      host = mysql_config["host"]
      port = mysql_config["port"]
    end
    opts.merge({:dump_bin => mysqldump_bin, :host => host, :port => port,
      :user => user, :passwd => passwd, :socket => socket, :name => name, :ts => current_time})
  end

  def cleanup(path)
    FileUtils.rm_rf(path) if path
  end
end

VCAP::Services::Mysql::Backup.new.start
